#+title: Bank Deposits Over Time
#+author: Matt Brigida
#+email: mdbrigida@gmail.com

#+begin_src python :session py :exports none :results none
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
#+end_src


#+begin_src python :session py :exports none :results none
panel = pd.read_csv("../../../1_FDIC/1_FDIC_SDI_data/build_panel/panel_python_20210630/6_final_panel_with_mdi.csv")
#+end_src

Overall:

#+begin_src python :session py :exports none :results none
grouped = panel[["quarter", "dep", "asset"]].groupby(["quarter"]).sum()

dep_asset = grouped["dep"] / grouped["asset"]
dep_asset = pd.DataFrame(dep_asset)
dep_asset.rename(columns={ dep_asset.columns[0]: "Deposits to Assets" }, inplace = True)

# plotly-----
all_fig = px.line(dep_asset, y="Deposits to Assets", title="Total Bank Deposits to Assets Over Time", template="plotly_dark")
all_fig.write_html("all_deposit_plot.html")
#+end_src

#+begin_comment
[[./all_deposit_plot.png]]
#+end_comment

#+begin_export html
<iframe src="./all_deposit_plot.html" width="100%" height="500px"></iframe>
#+end_export

By size:

Spit the data into quartiles.


#+begin_src python :session py :exports none :results none
### small-----
all_quarters = panel['quarter'].unique()
quantiles = pd.DataFrame([panel[panel['quarter'] == q]['asset'].quantile([0.25,0.5,0.75]) for q in all_quarters])
quantiles.set_index(all_quarters, inplace=True)

# for each quarter I want to subset the panel to only those banks with given assets, and then groupby.
panel_small = [pd.DataFrame(panel[(panel['quarter'] == q) & (panel['asset'] < quantiles.loc[q, 0.25])][["quarter", "dep", "asset"]].groupby(["quarter"]).sum()) for q in all_quarters]

small_df = pd.DataFrame(panel_small[0])

grouped_small = small_df.append([pd.DataFrame(panel_small[i]) for i in range(1, 115)])

dep_asset_small = grouped_small["dep"] / grouped_small["asset"]

### middle_low-----
# for each quarter I want to subset the panel to only those banks with given assets, and then groupby.
panel_middle_low = [pd.DataFrame(panel[(panel['quarter'] == q) & (panel['asset'] > quantiles.loc[q, 0.25]) & (panel['asset'] < quantiles.loc[q, 0.50])][["quarter", "dep", "asset"]].groupby(["quarter"]).sum()) for q in all_quarters]

middle_low_df = pd.DataFrame(panel_middle_low[0])

grouped_middle_low = middle_low_df.append([pd.DataFrame(panel_middle_low[i]) for i in range(1, 115)])

dep_asset_middle_low = grouped_middle_low["dep"] / grouped_middle_low["asset"]

### middle_high-----
# for each quarter I want to subset the panel to only those banks with given assets, and then groupby.
panel_middle_high = [pd.DataFrame(panel[(panel['quarter'] == q) & (panel['asset'] > quantiles.loc[q, 0.50]) & (panel['asset'] < quantiles.loc[q, 0.75])][["quarter", "dep", "asset"]].groupby(["quarter"]).sum()) for q in all_quarters]

middle_high_df = pd.DataFrame(panel_middle_high[0])

grouped_middle_high = middle_high_df.append([pd.DataFrame(panel_middle_high[i]) for i in range(1, 115)])

dep_asset_middle_high = grouped_middle_high["dep"] / grouped_middle_high["asset"]


### large-----
# for each quarter I want to subset the panel to only those banks with given assets, and then groupby.
panel_large = [pd.DataFrame(panel[(panel['quarter'] == q) & (panel['asset'] > quantiles.loc[q, 0.75])][["quarter", "dep", "asset"]].groupby(["quarter"]).sum()) for q in all_quarters]

large_df = pd.DataFrame(panel_large[0])

grouped_large = large_df.append([pd.DataFrame(panel_large[i]) for i in range(1, 115)])

dep_asset_large = grouped_large["dep"] / grouped_large["asset"]
#+end_src


#+begin_src python :session py :exports none :results none
dep_asset_small = pd.DataFrame(dep_asset_small)
dep_asset_small.rename(columns={ dep_asset_small.columns[0]: "Small Banks" }, inplace=True)
dep_asset_middle_low = pd.DataFrame(dep_asset_middle_low)
dep_asset_middle_low.rename(columns={ dep_asset_middle_low.columns[0]: "Middle_low Banks" }, inplace=True)
dep_asset_middle_high = pd.DataFrame(dep_asset_middle_high)
dep_asset_middle_high.rename(columns={ dep_asset_middle_high.columns[0]: "Middle_high Banks" }, inplace=True)
dep_asset_large = pd.DataFrame(dep_asset_large)
dep_asset_large.rename(columns={ dep_asset_large.columns[0]: "Large Banks" }, inplace=True)
dep_asset_by_size = dep_asset_small.join(dep_asset_middle_low, how = "outer")
dep_asset_by_size = dep_asset_by_size.join(dep_asset_middle_high, how = "outer")
dep_asset_by_size = dep_asset_by_size.join(dep_asset_large, how = "outer")


size_fig = px.line(dep_asset_by_size, y=["Small Banks", "Middle_low Banks", "Middle_high Banks", "Large Banks"], title="Bank Deposits to Assets by Bank Size", template="plotly_dark")
size_fig.write_html("size_deposit_plot.html")
#+end_src


#+begin_export html
<iframe src="./size_deposit_plot.html" width="100%" height="500px"></iframe>
#+end_export

By MDI Status:


#+begin_src python :session py :exports none :results none
## by MDI type--------

panel_b = panel[panel["Minority Status_(Alpha_Code)"] == "B"]

grouped_b = panel_b[["quarter", "dep", "asset"]].groupby(["quarter"]).sum()

dep_asset_b = grouped_b["dep"] / grouped_b["asset"]
dep_asset_b = pd.DataFrame(dep_asset_b)
dep_asset_b.rename(columns={ dep_asset_b.columns[0]: "Black-owned MDIs" }, inplace = True)

dep_asset_by_mdi = dep_asset.join(dep_asset_b, how = "outer")
dep_asset_by_mdi.rename(columns={ dep_asset_by_mdi.columns[0]: "All Banks"}, inplace = True)

#---

panel_h = panel[panel["Minority Status_(Alpha_Code)"] == "H"]

grouped_h = panel_h[["quarter", "dep", "asset"]].groupby(["quarter"]).sum()

dep_asset_h = grouped_h["dep"] / grouped_h["asset"]
dep_asset_h = pd.DataFrame(dep_asset_h)
dep_asset_h.rename(columns={ dep_asset_h.columns[0]: "Hispanic-owned MDIs" }, inplace = True)

dep_asset_by_mdi = dep_asset_by_mdi.join(dep_asset_h, how = "outer")

#---

panel_a = panel[panel["Minority Status_(Alpha_Code)"] == "A"]

grouped_a = panel_a[["quarter", "dep", "asset"]].groupby(["quarter"]).sum()

dep_asset_a = grouped_a["dep"] / grouped_a["asset"]
dep_asset_a = pd.DataFrame(dep_asset_a)
dep_asset_a.rename(columns={ dep_asset_a.columns[0]: "Asian-owned MDIs" }, inplace = True)

dep_asset_by_mdi = dep_asset_by_mdi.join(dep_asset_a, how = "outer")


mdi_fig = px.line(dep_asset_by_mdi, y=["All Banks", "Black-owned MDIs", "Hispanic-owned MDIs", "Asian-owned MDIs"], title="Bank Deposits to Assets by MDI Status Over Time", template="plotly_dark")
mdi_fig.write_html("mdi_deposit_plot.html")
#+end_src

#+begin_export html
<iframe src="./mdi_deposit_plot.html" width="100%" height="500px"></iframe>
#+end_export
